// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get all objects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "objectId"
                        }
                    }
                }
            },
            "post": {
                "description": "create object",
                "parameters": [
                    {
                        "description": "The object content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "body"
                        }
                    }
                }
            }
        },
        "/:objectId": {
            "get": {
                "description": "find object by objectid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the objectid you want to get",
                        "name": "objectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "objectId"
                        }
                    }
                }
            },
            "put": {
                "description": "update the object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The objectid you want to update",
                        "name": "objectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "objectId"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The objectId you want to delete",
                        "name": "objectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "objectId"
                        }
                    }
                }
            }
        },
        "/:uid": {
            "get": {
                "description": "get user by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The key for staticblock",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "uid"
                        }
                    }
                }
            },
            "put": {
                "description": "update the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The uid you want to update",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body for user content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "uid"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The uid you want to delete",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "uid"
                        }
                    }
                }
            }
        },
        "/login": {
            "get": {
                "description": "Logs user into the system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The username for login",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The password for login",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "user"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Logs out current logged in user session",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/ca": {
            "post": {
                "description": "create CA",
                "parameters": [
                    {
                        "description": "ca request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CARequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "invalid"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CARequest": {
            "type": "object",
            "properties": {
                "common_name": {
                    "type": "string"
                },
                "create_at": {
                    "type": "string"
                },
                "is_ca": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organisation": {
                    "type": "string"
                },
                "signing_algorithm": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "validity": {
                    "type": "integer"
                }
            }
        },
        "models.Object": {
            "type": "object",
            "properties": {
                "objectId": {
                    "type": "string"
                },
                "playerName": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/models.Profile"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
